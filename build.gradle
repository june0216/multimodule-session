

// plugin 이란 미리 구성해놓은 task 들의 모음이며, 특정 빌드과정에 필요한 기본정보를 포함함
plugins {
    id 'java' // 테스트, 번들링 기능과 함께 Java 컴파일을 추가해주며, 다른 JVM 언어 플러그인의 기반이 됨
    id 'org.springframework.boot' version '2.7.17' // 실행가능한 jar 또는 war로 패키징하여 애플리케이션 실행이 가능하도록 하며, spring-boot-dependencies 기반의 의존성 관리를 사용함
    id 'io.spring.dependency-management' version '1.0.15.RELEASE' // 자동으로 spring-boot-dependencies bom을 끌어와서 버전 관리를 해줌
}

// 현재의 root 프로젝트와 앞으로 추가될 서브 모듈에 대한 설정
allprojects {
    sourceCompatibility = '11'
    targetCompatibility = '11'

    // 라이브러리들을 받아올 원격 저장소들을 설정함
    repositories {
        mavenCentral()
    }

}

subprojects {
    // subprojects 블록 안에서는 plugins 블록을 사용할 수 없으므로 apply plugin을 사용해야 함
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    group = 'com.efub'
    version = '0.0.1-SNAPSHOT'
// 모든 서브 모듈에서 사용될 공통 의존성들을 추가함
    dependencies {
        implementation "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        implementation 'org.springframework.boot:spring-boot-starter-web'

        testImplementation "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        //JPA
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    }

}

// 모든 서브 모듈에서 Junit을 사용하기 위한 설정
tasks.named('test') {
    useJUnitPlatform()
}

//
project(':shop-common') {
    // 실행가능한 jar로 생성하는 옵션, main이 없는 라이브러리에서는 false로 비활성화함
    bootJar { enabled = false } // 이는 shop-common이 독립 실행 가능한 애플리케이션이 아님을 나타냅
    jar { enabled = true }

    dependencies {
    }
}


project(":shop-api") {
    jar { enabled = false }
    dependencies {
        implementation project(path:':shop-common', configuration: 'default') //shop-common 모듈에 대한 프로젝트 간 의존성을 선언합니다., shop-common의 코드를 사용
        implementation project(path:':shop-domain-rdb', configuration: 'default')
        implementation project(path:':shop-domain-redis', configuration: 'default')
        implementation 'org.springframework.boot:spring-boot-starter-web' //Spring Boot 웹 스타터 의존성을 추가합니다. 이는 웹 애플리케이션 개발에 필요한 스프링 부트 컴포넌트와 라이브러리를 포함
        implementation 'org.springframework.boot:spring-boot-starter-data-rest'
        runtimeOnly 'com.mysql:mysql-connector-j'
    }
}
project(":shop-common") {
    bootJar { enabled = true }
    jar { enabled = false }
    dependencies {
        implementation project(path:':shop-common', configuration: 'default')
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
}

project(":shop-domain") {
    bootJar { enabled = true }
    jar { enabled = false }
    dependencies {
        implementation project(path:':shop-common', configuration: 'default')


    }
}

project(":shop-domain-rdb") {
    bootJar { enabled = true }
    jar { enabled = false }
    dependencies {
        implementation project(path:':shop-common', configuration: 'default')
        implementation project(path:':shop-domain', configuration: 'default')

    }
}

project(":shop-domain-redis") {
    bootJar { enabled = true }
    jar { enabled = false }
    dependencies {
        implementation project(path:':shop-common', configuration: 'default')
        implementation project(path:':shop-domain', configuration: 'default')
        //redis
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    }
}
